name: Daily NFL Transaction Scraper

on:
  schedule:
    # Run daily at 2:00 PM UTC (9:00 AM EST)
    - cron: '0 14 * * *'
  workflow_dispatch:  # Allow manual triggering
    inputs:
      date:
        description: 'Date to scrape (YYYY-MM-DD, optional)'
        required: false
        type: string
      test_mode:
        description: 'Run in test mode'
        required: false
        type: boolean
        default: false

env:
  PYTHON_VERSION: '3.9'

jobs:
  scrape-nfl-transactions:
    runs-on: ubuntu-latest
    
    steps:
    - name: 🏈 Checkout Repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'

    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: 🧪 Test System Connectivity
      if: ${{ inputs.test_mode }}
      run: |
        echo "🧪 Running connectivity tests..."
        python -c "
import requests
print('🔍 Testing ESPN API...')
try:
    response = requests.get('https://sports.core.api.espn.com/v2/sports/football/leagues/nfl/transactions?limit=1')
    if response.status_code == 200:
        print('✅ ESPN API: Connected')
    else:
        print(f'⚠️ ESPN API: Status {response.status_code}')
except Exception as e:
    print(f'❌ ESPN API: {e}')

print('🔍 Testing Airtable credentials...')
import os
token = os.getenv('AIRTABLE_ACCESS_TOKEN', '')
base_id = os.getenv('AIRTABLE_BASE_ID', '')
table_name = os.getenv('AIRTABLE_TABLE_NAME', '')
print(f'Token: {\"✅\" if token else \"❌\"}')
print(f'Base ID: {\"✅\" if base_id else \"❌\"}')
print(f'Table Name: {\"✅\" if table_name else \"❌\"}')
"
      env:
        AIRTABLE_ACCESS_TOKEN: ${{ secrets.AIRTABLE_ACCESS_TOKEN }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}

    - name: 🏈 Run NFL Transaction Scraper and Send to Airtable
      if: ${{ !inputs.test_mode }}
      env:
        AIRTABLE_ACCESS_TOKEN: ${{ secrets.AIRTABLE_ACCESS_TOKEN }}
        AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
        AIRTABLE_TABLE_NAME: ${{ secrets.AIRTABLE_TABLE_NAME }}
      run: |
        echo "🚀 Starting NFL transaction automation with direct Airtable integration..."
        
        python -c "
import sys
sys.path.append('src')
from transaction_scraper import NFLTransactionScraper
import requests
import json
import os
from datetime import datetime

print('🔧 Initializing NFL Transaction Scraper...')

# Initialize scraper
scraper = NFLTransactionScraper()

# Get today's transactions (or specific date if provided)
date_param = '${{ inputs.date }}' if '${{ inputs.date }}' else None
df = scraper.get_daily_transactions(date_param)

print(f'📊 Found {len(df)} NFL transactions')

# Airtable configuration
access_token = os.getenv('AIRTABLE_ACCESS_TOKEN')
base_id = os.getenv('AIRTABLE_BASE_ID')
table_name = os.getenv('AIRTABLE_TABLE_NAME')

if not access_token or not base_id or not table_name:
    print('❌ Airtable credentials not configured properly')
    print(f'Token: {\"✅\" if access_token else \"❌\"}')
    print(f'Base ID: {\"✅\" if base_id else \"❌\"}') 
    print(f'Table Name: {\"✅\" if table_name else \"❌\"}')
    exit(1)

print('🔗 Airtable credentials configured successfully')

url = f'https://api.airtable.com/v0/{base_id}/{table_name}'
headers = {
    'Authorization': f'Bearer {access_token}',
    'Content-Type': 'application/json'
}

if not df.empty:
    # Save CSV backup
    filename = scraper.save_to_csv(df)
    print(f'💾 Saved backup to: {filename}')
    
    # Send each transaction to Airtable
    print('📊 Sending transactions to Airtable...')
    
    success_count = 0
    for index, row in df.iterrows():
        data = {
            'fields': {
                'Date': row['date'],
                'Type': row['type'],
                'Team': row['team'],
                'Player': row['player'],
                'Description': row['description'],
                'Transaction ID': row['transaction_id'],
                'Source': 'ESPN API',
                'Imported At': row['scraped_at']
            }
        }
        
        try:
            response = requests.post(url, json=data, headers=headers)
            if response.status_code == 200:
                print(f'  ✅ Added: {row[\"type\"]} - {row[\"team\"]} - {row[\"player\"]}')
                success_count += 1
            else:
                print(f'  ❌ Failed: {response.status_code} - {response.text}')
        except Exception as e:
            print(f'  ❌ Error: {e}')
    
    print(f'🏆 Successfully sent {success_count}/{len(df)} transactions to Airtable!')
else:
    print('📭 No NFL transactions found for today (normal during quiet periods)')
    
    # Send daily status update to confirm system is working
    status_data = {
        'fields': {
            'Date': datetime.now().strftime('%Y-%m-%d'),
            'Type': 'System Status',
            'Team': 'Automation',
            'Player': 'Daily Check',
            'Description': f'Daily ESPN API check completed at {datetime.now().strftime(\"%Y-%m-%d %H:%M UTC\")} - No new transactions found',
            'Transaction ID': f'STATUS_{datetime.now().strftime(\"%Y%m%d\")}',
            'Source': 'GitHub Actions',
            'Imported At': datetime.now().isoformat()
        }
    }
    
    try:
        response = requests.post(url, json=status_data, headers=headers)
        if response.status_code == 200:
            print('📊 ✅ Sent daily status update to Airtable')
        else:
            print(f'📊 ❌ Status update failed: {response.status_code}')
    except Exception as e:
        print(f'❌ Error sending status: {e}')

print('🏁 NFL transaction automation completed!')
"

    - name: 📊 Upload Transaction Data
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: nfl-transactions-${{ github.run_number }}
        path: |
          data/*.csv
          logs/*.log
        retention-days: 30

    - name: 📝 Commit Updated Data
      if: success()
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "NFL Transaction Bot"
        
        # Add any new data files
        git add data/ || true
        git add logs/ || true
        
        # Commit if there are changes
        if git diff --staged --quiet; then
          echo "📭 No new data to commit"
        else
          git commit -m "📊 Daily NFL transaction update - $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "✅ Successfully committed new transaction data"
        fi

    - name: 📈 Generate Summary Report
      if: always()
      run: |
        echo "## 🏈 NFL Transaction Automation Summary" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date -u '+%Y-%m-%d %H:%M UTC')" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        
        if [ -f "logs/nfl_automation.log" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📋 Latest Log Entries:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          tail -20 logs/nfl_automation.log >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ -d "data" ] && [ "$(ls -A data)" ]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Data Files Created:" >> $GITHUB_STEP_SUMMARY
          ls -la data/ >> $GITHUB_STEP_SUMMARY
        fi

    - name: 🚨 Notify on Failure
      if: failure()
      run: |
        echo "❌ NFL Transaction automation failed!"
        echo "Check the logs for details and verify:"
        echo "1. ESPN API is accessible"
        echo "2. Airtable credentials are valid"
        echo "3. Airtable Base ID and Table Name are correct"
        echo "4. All required secrets are configured"

  notify-status:
    runs-on: ubuntu-latest
    needs: scrape-nfl-transactions
    if: always()
    
    steps:
    - name: 📊 Log Automation Status
      run: |
        if [ "${{ needs.scrape-nfl-transactions.result }}" = "success" ]; then
          echo "✅ NFL transaction automation completed successfully!"
          echo "📊 Data sent to Airtable: Denauld Brown Consulting > Transactions"
          echo "🔄 Next run: Tomorrow at 9:00 AM EST"
        else
          echo "❌ NFL transaction automation failed!"
          echo "🔧 Check logs and verify Airtable credentials"
        fi
